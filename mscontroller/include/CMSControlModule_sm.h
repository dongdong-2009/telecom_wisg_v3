#ifndef _H_CMSCONTROLMODULE_SM
#define _H_CMSCONTROLMODULE_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CMSControlModule_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class CMSControlModState;
class CMSControlModState_IDLE;
class CMSControlModState_CALLPROC;
class CMSControlModState_JOIN;
class CMSControlModState_CLOSED;
class CMSControlModState_Default;
class CMSControlModuleState;
class CMSControlModuleContext;
class CMSControlModule;

class CMSControlModuleState :
    public statemap::State
{
public:

    CMSControlModuleState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CMSControlModuleContext&) {};
    virtual void Exit(CMSControlModuleContext&) {};

    virtual void onAck(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onBye(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onCancel(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onInvite(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onResponse(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark);

protected:

    virtual void Default(CMSControlModuleContext& context);
};

class CMSControlModState
{
public:

    static CMSControlModState_IDLE IDLE;
    static CMSControlModState_CALLPROC CALLPROC;
    static CMSControlModState_JOIN JOIN;
    static CMSControlModState_CLOSED CLOSED;
};

class CMSControlModState_Default :
    public CMSControlModuleState
{
public:

    CMSControlModState_Default(const char *name, int stateId)
    : CMSControlModuleState(name, stateId)
    {};

    virtual void onInvite(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onResponse(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onAck(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onCancel(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onBye(CMSControlModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark);
};

class CMSControlModState_IDLE :
    public CMSControlModState_Default
{
public:
    CMSControlModState_IDLE(const char *name, int stateId)
    : CMSControlModState_Default(name, stateId)
    {};

    void onInvite(CMSControlModuleContext& context, TUniNetMsg* msg);
};

class CMSControlModState_CALLPROC :
    public CMSControlModState_Default
{
public:
    CMSControlModState_CALLPROC(const char *name, int stateId)
    : CMSControlModState_Default(name, stateId)
    {};

    void onBye(CMSControlModuleContext& context, TUniNetMsg* msg);
    void onResponse(CMSControlModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark);
};

class CMSControlModState_JOIN :
    public CMSControlModState_Default
{
public:
    CMSControlModState_JOIN(const char *name, int stateId)
    : CMSControlModState_Default(name, stateId)
    {};

    void onResponse(CMSControlModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark);
};

class CMSControlModState_CLOSED :
    public CMSControlModState_Default
{
public:
    CMSControlModState_CLOSED(const char *name, int stateId)
    : CMSControlModState_Default(name, stateId)
    {};

    void Entry(CMSControlModuleContext&);
};

class CMSControlModuleContext :
    public statemap::FSMContext
{
public:

    CMSControlModuleContext(CMSControlModule& owner)
    : FSMContext(CMSControlModule::IDLE),
      _owner(owner)
    {};

    CMSControlModuleContext(CMSControlModule& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    CMSControlModule& getOwner() const
    {
        return (_owner);
    };

    CMSControlModuleState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<CMSControlModuleState&>(*_state));
    };

    void onAck(TUniNetMsg* msg)
    {
        (getState()).onAck(*this, msg);
    };

    void onBye(TUniNetMsg* msg)
    {
        (getState()).onBye(*this, msg);
    };

    void onCancel(TUniNetMsg* msg)
    {
        (getState()).onCancel(*this, msg);
    };

    void onInvite(TUniNetMsg* msg)
    {
        (getState()).onInvite(*this, msg);
    };

    void onResponse(TUniNetMsg* msg)
    {
        (getState()).onResponse(*this, msg);
    };

    void onTimeOut(TTimeMarkExt timerMark)
    {
        (getState()).onTimeOut(*this, timerMark);
    };

private:

    CMSControlModule& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CMSCONTROLMODULE_SM
