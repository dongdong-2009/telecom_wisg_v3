/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CMSControlModule_sm.sm
 */


/*********************************************************************
 * Copyright (c)2010-2012, by BUPT
 * All rights reserved.

 * FileName:       MSControlModule.sm
 * System:         webrtc
 * SubSystem:      gateway
 * Author:         Yadong Zhang
 * Date:           2015-12-22
 * Version:        1.0
 * Description:
     XMSControlModule state machine???

*******************************************************************************/


#include "CMSControlModule.h"
#include "CMSControlModule_sm.h"

using namespace statemap;

// Static class declarations.
CMSControlModState_IDLE CMSControlModState::IDLE("CMSControlModState::IDLE", 0);
CMSControlModState_CALLPROC CMSControlModState::CALLPROC("CMSControlModState::CALLPROC", 1);
CMSControlModState_JOIN CMSControlModState::JOIN("CMSControlModState::JOIN", 2);
CMSControlModState_CLOSED CMSControlModState::CLOSED("CMSControlModState::CLOSED", 3);

void CMSControlModuleState::onAck(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CMSControlModuleState::onBye(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CMSControlModuleState::onCancel(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CMSControlModuleState::onInvite(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CMSControlModuleState::onResponse(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CMSControlModuleState::onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark)
{
    Default(context);
    return;
}

void CMSControlModuleState::Default(CMSControlModuleContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void CMSControlModState_Default::onInvite(CMSControlModuleContext& context, TUniNetMsg* msg)
{


    return;
}

void CMSControlModState_Default::onResponse(CMSControlModuleContext& context, TUniNetMsg* msg)
{


    return;
}

void CMSControlModState_Default::onAck(CMSControlModuleContext& context, TUniNetMsg* msg)
{


    return;
}

void CMSControlModState_Default::onCancel(CMSControlModuleContext& context, TUniNetMsg* msg)
{


    return;
}

void CMSControlModState_Default::onBye(CMSControlModuleContext& context, TUniNetMsg* msg)
{


    return;
}

void CMSControlModState_Default::onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark)
{
    CMSControlModule& ctxt(context.getOwner());

    CMSControlModuleState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.endTask();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

    return;
}

void CMSControlModState_IDLE::onInvite(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    CMSControlModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.setTimer(SIPCALL_200OK_TIMEOUT);
        ctxt.sendInviteToMS(msg);
        context.setState(CMSControlModState::CALLPROC);
    }
    catch (...)
    {
        context.setState(CMSControlModState::CALLPROC);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CMSControlModState_CALLPROC::onBye(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    CMSControlModule& ctxt(context.getOwner());

    if (true == ctxt.isFromMS(msg))
    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendByeToSipCall();
            context.setState(CMSControlModState::CLOSED);
        }
        catch (...)
        {
            context.setState(CMSControlModState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (false == ctxt.isFromMS(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendByeToMS();
            context.setState(CMSControlModState::CLOSED);
        }
        catch (...)
        {
            context.setState(CMSControlModState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }    else
    {
         CMSControlModState_Default::onBye(context, msg);
    }

    return;
}

void CMSControlModState_CALLPROC::onResponse(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    CMSControlModule& ctxt(context.getOwner());

    if (true == ctxt.isResp1xx(msg))
    {
        // No actions.
    }
    else if (true == ctxt.isResp3xx_6xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendRespToSipCall(msg);
            context.setState(CMSControlModState::CLOSED);
        }
        catch (...)
        {
            context.setState(CMSControlModState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && (true == ctxt.isJoinFinished() || false == isBothCallFinished()))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendAnswerToSipCall(msg);
            ctxt.sendAckToMS(msg);
            context.setState(CMSControlModState::IDLE);
        }
        catch (...)
        {
            context.setState(CMSControlModState::IDLE);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && (false == ctxt.isJoinFinished() && true == isBothCallFinished()))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendAnswerToSipCall(msg);
            ctxt.sendInfoToMS();
            ctxt.setTimer(SIPCALL_200OK_TIMEOUT);
            context.setState(CMSControlModState::JOIN);
        }
        catch (...)
        {
            context.setState(CMSControlModState::JOIN);
            throw;
        }
        (context.getState()).Entry(context);
    }    else
    {
         CMSControlModState_Default::onResponse(context, msg);
    }

    return;
}

void CMSControlModState_CALLPROC::onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark)
{
    CMSControlModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        context.setState(CMSControlModState::CLOSED);
    }
    catch (...)
    {
        context.setState(CMSControlModState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CMSControlModState_JOIN::onResponse(CMSControlModuleContext& context, TUniNetMsg* msg)
{
    CMSControlModule& ctxt(context.getOwner());

    if (true == ctxt.isResp1xx(msg))
    {
        // No actions.
    }
    else if (true == ctxt.isResp3xx_6xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendByeToSipCall();
            context.setState(CMSControlModState::CLOSED);
        }
        catch (...)
        {
            context.setState(CMSControlModState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            context.setState(CMSControlModState::IDLE);
        }
        catch (...)
        {
            context.setState(CMSControlModState::IDLE);
            throw;
        }
        (context.getState()).Entry(context);
    }    else
    {
         CMSControlModState_Default::onResponse(context, msg);
    }

    return;
}

void CMSControlModState_JOIN::onTimeOut(CMSControlModuleContext& context, TTimeMarkExt timerMark)
{
    CMSControlModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        context.setState(CMSControlModState::CLOSED);
    }
    catch (...)
    {
        context.setState(CMSControlModState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CMSControlModState_CLOSED::Entry(CMSControlModuleContext& context)

{
    CMSControlModule& ctxt(context.getOwner());

    ctxt.endTask();
    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
