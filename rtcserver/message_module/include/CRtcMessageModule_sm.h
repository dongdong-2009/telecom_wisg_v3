#ifndef _H_CRTCMESSAGEMODULE_SM
#define _H_CRTCMESSAGEMODULE_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CRtcMessageModule_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class CRtcMessageModState;
class CRtcMessageModState_IDLE;
class CRtcMessageModState_FORWARD;
class CRtcMessageModState_Default;
class CRtcMessageModuleState;
class CRtcMessageModuleContext;
class CRtcMessageModule;

class CRtcMessageModuleState :
    public statemap::State
{
public:

    CRtcMessageModuleState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CRtcMessageModuleContext&) {};
    virtual void Exit(CRtcMessageModuleContext&) {};

    virtual void onMessage(CRtcMessageModuleContext& context, TUniNetMsg* msg);

protected:

    virtual void Default(CRtcMessageModuleContext& context);
};

class CRtcMessageModState
{
public:

    static CRtcMessageModState_IDLE IDLE;
    static CRtcMessageModState_FORWARD FORWARD;
};

class CRtcMessageModState_Default :
    public CRtcMessageModuleState
{
public:

    CRtcMessageModState_Default(const char *name, int stateId)
    : CRtcMessageModuleState(name, stateId)
    {};

};

class CRtcMessageModState_IDLE :
    public CRtcMessageModState_Default
{
public:
    CRtcMessageModState_IDLE(const char *name, int stateId)
    : CRtcMessageModState_Default(name, stateId)
    {};

    void onMessage(CRtcMessageModuleContext& context, TUniNetMsg* msg);
};

class CRtcMessageModState_FORWARD :
    public CRtcMessageModState_Default
{
public:
    CRtcMessageModState_FORWARD(const char *name, int stateId)
    : CRtcMessageModState_Default(name, stateId)
    {};

    void Entry(CRtcMessageModuleContext&);
};

class CRtcMessageModuleContext :
    public statemap::FSMContext
{
public:

    CRtcMessageModuleContext(CRtcMessageModule& owner)
    : FSMContext(CRtcMessageModState::IDLE),
      _owner(owner)
    {};

    CRtcMessageModuleContext(CRtcMessageModule& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    CRtcMessageModule& getOwner() const
    {
        return (_owner);
    };

    CRtcMessageModuleState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<CRtcMessageModuleState&>(*_state));
    };

    void onMessage(TUniNetMsg* msg)
    {
        (getState()).onMessage(*this, msg);
    };

private:

    CRtcMessageModule& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CRTCMESSAGEMODULE_SM
