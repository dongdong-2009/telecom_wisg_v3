/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CRtcMessageModule_sm.sm
 */


/*********************************************************************
 * Copyright (c)2010-2012, by BUPT
 * All rights reserved.

 * FileName:       CRtcMessageModule.sm
 * System:         webrtc
 * SubSystem:      gateway
 * Author:         Liu Mingshuan
 * Date:           2012.12.19
 * Version:        1.0
 * Description:
     RtcMessageModule state machineã

 *
 * Last Modified:
     2012-12-19 original version
            By Liu Mingshuan.
*******************************************************************************/


#include "CRtcMessageModule.h"
#include "./CRtcMessageModule_sm.h"

using namespace statemap;

// Static class declarations.
CRtcMessageModState_IDLE CRtcMessageModState::IDLE("CRtcMessageModState::IDLE", 0);
CRtcMessageModState_FORWARD CRtcMessageModState::FORWARD("CRtcMessageModState::FORWARD", 1);

void CRtcMessageModuleState::onMessage(CRtcMessageModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CRtcMessageModuleState::Default(CRtcMessageModuleContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void CRtcMessageModState_IDLE::onMessage(CRtcMessageModuleContext& context, TUniNetMsg* msg)
{
    CRtcMessageModule& ctxt(context.getOwner());

    if (RTC_IM == msg->msgName)
    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.sendToDispatcher(msg);
            context.setState(CRtcMessageModState::FORWARD);
        }
        catch (...)
        {
            context.setState(CRtcMessageModState::FORWARD);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else
    {
         CRtcMessageModState_Default::onMessage(context, msg);
    }

    return;
}

void CRtcMessageModState_FORWARD::Entry(CRtcMessageModuleContext& context)

{
    CRtcMessageModule& ctxt(context.getOwner());

    ctxt.endTask();
    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
