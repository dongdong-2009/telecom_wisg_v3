#ifndef _H_CRTCCALLMODULE_SM
#define _H_CRTCCALLMODULE_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CRtcCallModule_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class CRtcCallModState;
class CRtcCallModState_IDLE;
class CRtcCallModState_OFFER;
class CRtcCallModState_ANSWER;
class CRtcCallModState_ACTIVE;
class CRtcCallModState_SHUTDOWN;
class CRtcCallModState_CLOSED;
class CRtcCallModState_Default;
class CRtcCallModuleState;
class CRtcCallModuleContext;
class CRtcCallModule;

class CRtcCallModuleState :
    public statemap::State
{
public:

    CRtcCallModuleState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CRtcCallModuleContext&) {};
    virtual void Exit(CRtcCallModuleContext&) {};

    virtual void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CRtcCallModuleContext& context, TTimeMarkExt timerMark);

protected:

    virtual void Default(CRtcCallModuleContext& context);
};

class CRtcCallModState
{
public:

    static CRtcCallModState_IDLE IDLE;
    static CRtcCallModState_OFFER OFFER;
    static CRtcCallModState_ANSWER ANSWER;
    static CRtcCallModState_ACTIVE ACTIVE;
    static CRtcCallModState_SHUTDOWN SHUTDOWN;
    static CRtcCallModState_CLOSED CLOSED;
};

class CRtcCallModState_Default :
    public CRtcCallModuleState
{
public:

    CRtcCallModState_Default(const char *name, int stateId)
    : CRtcCallModuleState(name, stateId)
    {};

    virtual void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CRtcCallModuleContext& context, TTimeMarkExt timerMark);
};

class CRtcCallModState_IDLE :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_IDLE(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
};

class CRtcCallModState_OFFER :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_OFFER(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CRtcCallModuleContext& context, TTimeMarkExt timerMark);
};

class CRtcCallModState_ANSWER :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_ANSWER(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CRtcCallModuleContext& context, TTimeMarkExt timerMark);
};

class CRtcCallModState_ACTIVE :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_ACTIVE(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
};

class CRtcCallModState_SHUTDOWN :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_SHUTDOWN(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void onMessage(CRtcCallModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CRtcCallModuleContext& context, TTimeMarkExt timerMark);
};

class CRtcCallModState_CLOSED :
    public CRtcCallModState_Default
{
public:
    CRtcCallModState_CLOSED(const char *name, int stateId)
    : CRtcCallModState_Default(name, stateId)
    {};

    void Entry(CRtcCallModuleContext&);
};

class CRtcCallModuleContext :
    public statemap::FSMContext
{
public:

    CRtcCallModuleContext(CRtcCallModule& owner)
    : FSMContext(CRtcCallModState::IDLE),
      _owner(owner)
    {};

    CRtcCallModuleContext(CRtcCallModule& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    CRtcCallModule& getOwner() const
    {
        return (_owner);
    };

    CRtcCallModuleState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<CRtcCallModuleState&>(*_state));
    };

    void onMessage(TUniNetMsg* msg)
    {
        (getState()).onMessage(*this, msg);
    };

    void onTimeOut(TTimeMarkExt timerMark)
    {
        (getState()).onTimeOut(*this, timerMark);
    };

private:

    CRtcCallModule& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CRTCCALLMODULE_SM
