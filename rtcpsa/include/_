/*
 * for recevie and send message
 */
#ifndef _PRACTICAL_SOCKET_H
#define _PRACTICAL_SOCKET_H
#include "dbHandler.h"
#include "CMsgBuffer.h"
#include "CRtcProtocolParser.h"

#include <stdio.h>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <time.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <pthread.h>
#include <unistd.h>
#include <cstdlib>
#include <netdb.h>
#include <arpa/inet.h>
#include <iostream>
#define BUFFER_SIZE 4096
using namespace std;
typedef struct Packet{
	u_int32_t len;
	char buf[BUFFER_SIZE];
} Packet, *PacketPtr;

typedef struct {
	int mediafd;	//listen media_gateway
	int wcsfd;		//listen wcs
}Listenfds, * ListenfdsPtr;

class MediaSocketLastUsed{
public:
	MediaSocketLastUsed(int _sockfd){
		//get current system time
		time_t t = time(NULL);

		m_seconds = (int)t;
		m_sockfd = _sockfd;
	}

	MediaSocketLastUsed(const MediaSocketLastUsed& _rhs){
		m_seconds = _rhs.m_seconds;
		m_sockfd = _rhs.m_sockfd;
	}

	int get_sockfd()const{
		return m_sockfd;
	}

	int get_time()const{
		return m_seconds;
	}

	bool operator<(const MediaSocketLastUsed& _rhs)const{
		return m_seconds < _rhs.m_seconds;
	}
private:
	int m_seconds;//from 1990 till now
	int m_sockfd;
};

class MySet{
public:
	MySet(){
		//static initiaize
		m_mutex = PTHREAD_MUTEX_INITIALIZER;
	}

	void clear(){
		m_set.clear();
	}


	//return 1 if no , 0 on failure
	int Insert(MediaSocketLastUsed _ele){
		pair<set<MediaSocketLastUsed>::iterator, bool> ret;
		pthread_mutex_lock(&m_mutex);
		ret = m_set.insert(_ele);
		pthread_mutex_unlock(&m_mutex);
		return ret.second;
	}

	//return media gateway socket id that is used longest time ago
	int GetHeadMGSocket(){
		int ret;
		pthread_mutex_lock(&m_mutex);
		if(m_set.size() == 0)ret = -1;
		else{
			MediaSocketLastUsed old = *(m_set.begin());
			ret = old.get_sockfd();
			m_set.erase(m_set.begin());
			MediaSocketLastUsed tmp(ret);
			m_set.insert(tmp);
		}
		pthread_mutex_unlock(&m_mutex);

		return ret;
	}

	bool CheckSockfd(int _sockid){
		set<MediaSocketLastUsed>::iterator it;
			bool ret = false;
			pthread_mutex_lock(&m_mutex);
			for(it = m_set.begin(); it!=m_set.end(); it++){
				if(it->get_sockfd() == _sockid){
					ret = true;
					break;
				}
			}
			pthread_mutex_unlock(&m_mutex);
			return ret;
	}

	//return 1 on deleting successfully, 0 on finding no such sockid
	int Delete(int _sockid){
		set<MediaSocketLastUsed>::iterator it;
		int ret = 0;
		pthread_mutex_lock(&m_mutex);
		for(it = m_set.begin(); it!=m_set.end(); it++){
			if(it->get_sockfd() == _sockid){
				m_set.erase(it);
				ret = 1;
				break;
			}
		}
		pthread_mutex_unlock(&m_mutex);
		return ret;
	}

	void print(){
		set<MediaSocketLastUsed>::iterator it;
		pthread_mutex_lock(&m_mutex);
		for(it = m_set.begin(); it!=m_set.end(); it++){
			printf("time: %d, socketfd: %d\n", it->get_time(), it->get_sockfd());
		}
		puts("");
		pthread_mutex_unlock(&m_mutex);
	}

	vector<int> getSockfds(){
		vector<int> sockfds;
		set<MediaSocketLastUsed>::iterator it;
		pthread_mutex_lock(&m_mutex);
		for(it = m_set.begin(); it!=m_set.end(); it++){
			sockfds.push_back(it->get_sockfd());
		}
		pthread_mutex_unlock(&m_mutex);
		return sockfds;
	}
private:
	set<MediaSocketLastUsed> m_set;
	pthread_mutex_t m_mutex;
};


class CPracticalSocket{
private:
	pthread_t m_tListenId;
	Listenfds m_listenfds;

	int m_mediaPort;
	int m_wcsPort;
	//webrtc user name( or media gateway) mapped to socketfd
	map<string, int> m_mapWcsSockets;

	map<string, int> m_mapMgSockets;

	MySet m_mgClifds;

	set<int> m_wcsClifds;

	bool stop;
	CMsgBuffer msgBuffer;
public:
	CPracticalSocket();
	virtual ~CPracticalSocket();
	bool init(int, int);
	//bool recvMsg(vector<string> &vecMsg);
	bool recvMsg(int& sockfd, string& msg);
	bool sendMsg(int clientSock, string msg, bool isSendToMG);
	void stopThread(){
		msgBuffer.stop();
		stop = true;
	}

	void insertNewMgMap(const string & offersessionId);

	int deleteMgMap(const string & offersessionId);

	int getClientSocketByDomain(const string& offersessionId, const bool isSendToMg);
	string getDomainbySocket(int sockfd);

	bool isFromMg(int sockfd);

friend void* ListenThread(void*);
friend void* RecvThread(void*);
};





//set<SocketLastUsedTime> mg_socket_set;
//
//int main(){
//	for(int i=0; i<10; i++){
//		mg_socket_set.insert(SocketLastUsedTime(i));
//		set<SocketLastUsedTime>::iterator it = mg_socket_set.begin();
////		SocketLastUsedTime tmp = *it;
//		printf("%d\n", it->get_sockfd());
//	}
//	return 0;
//}


#endif
