%{
/*********************************************************************
 * Copyright (c)2010-2012, by BUPT
 * All rights reserved.

 * FileName:       MSControlModule.sm
 * System:         webrtc
 * SubSystem:      gateway
 * Author:         Yadong Zhang
 * Date:           2016-1-11
 * Version:        1.0
 * Description:
     Bear state machine。

*******************************************************************************/
%}
/* all possible sate
 * IDLE			initial.
 * BEAR_INITIAL		发送INVITE，等待XMS返回200OK
 * BEAR_READY		收到200OK,发送ACK，连接建立
 * BEAR_JOIN 		收到CALL MOD发来的JOIN命令，向XMS发送INFO JOIN
 * BEAR_MODIFYING	收到CALL MOD发来的修改SDP请求，向XMS发送RE—INVITE
 * 
*/


//指明.sm服务的实际Task类
%class	CBearModule
//指明需要SMC生成的代码包含哪个文件。只能一个。如多于一个将被忽略。
%header CBearModule.h
//初始状态
%start CBearState::IDLE
//生成的状态集合名称
%map CBearState
%%

IDLE
{
	onSdpRequest(msg:TUniNetMsg*)
	BEAR_INITIAL
	{
		setTimer(BEAR_200OK_TIMEOUT);
		sendInviteToMS(msg);
	}
}

BEAR_INITIAL
{
	//收到响应 1XX
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp1xx(msg)]   	
	nil 
	{
	//	stopTimer();
	//  sendToDispatcher(msg); // 不转发，即使是180
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]   //如果收到的是3xx~6xx的错误响应，释放会话
	CLOSED
	{
		stopTimer();
		sendErrorToCall(MS_ERROR_REFUSED);
	}
	
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg)]    	//收到200 OK 携带SDP，会话建立成功
	BEAR_READY
	{
		stopTimer();
		setConnId(msg);
		sendSdpAnswerToCall(msg);	//返回SDP给CALL模块		
		sendAckToMS(msg);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg)] 
	CLOSED
	{//收到200 OK, 但不携带SDP，该情况基本不出现
		stopTimer();
		sendErrorToCall(MS_ERROR_OTHER);
		setTimer(BEAR_200OK_TIMEOUT);
		sendAckToMS(msg);
		sendByeToMS();
	}
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//Bye from MS
		stopTimer();
		sendCloseToCall();
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//Close from Call
		stopTimer();
		sendCancelToMS();
	}

	onTimeOut(timerMark:TTimeMarkExt)  	//等待响应超时，会话释放
	CLOSED
	{	
		sendCloseToCall();
		sendCancelToMS();
		stopTimer();
	}
	
}

BEAR_READY
{
	onSdpRequest(msg:TUniNetMsg*)   	
	BEAR_MODIFYING
	{
		setTimer(BEAR_200OK_TIMEOUT);
		sendInviteToMS(msg);
	}
	
	onBye(msg:TUniNetMsg*) 
	CLOSED
	{
		sendCloseToCall();
	}
	
	onClose(msg:TUniNetMsg*)  	//等待响应超时，会话释放
	CLOSED
	{	
		sendByeToMS();
	}
	
	onJoin(msg:TUniNetMsg*)
	BEAR_JOIN
	{
		sendJoinToMS(msg);
		setTimer(BEAR_200OK_TIMEOUT);
	}
}

BEAR_JOIN{
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp1xx(msg)]   	
	nil 
	{
	//	stopTimer();
	//  sendToDispatcher(msg); // 不转发，即使是180
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]   //如果收到的是3xx~6xx的错误响应，释放会话
	CLOSED
	{
		stopTimer();
		sendErrorToCall(MS_ERROR_REFUSED);
	}
	
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp2xx(msg) && "INFO" == ctxt.checkRespCSeqMethod(msg)]    	//收到200 OK 携带SDP，会话建立成功
	BEAR_READY
	{
		stopTimer();	
	}
	
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp2xx(msg) && "INFO" != ctxt.checkRespCSeqMethod(msg)]    	//收到200 OK 携带SDP，会话建立成功
	nil
	{
	}
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//Bye from MS
		stopTimer();
		sendCloseToCall();
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//Close from Call
		stopTimer();
		sendByeToMS();
	}

	onTimeOut(timerMark:TTimeMarkExt)  	//等待响应超时，会话释放
	CLOSED
	{	
		sendCloseToCall();
		sendByeToMS();
		stopTimer();
	}
	
}


BEAR_MODIFYING
{
	//收到响应 1XX
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp1xx(msg)]   	
	nil 
	{
	//	stopTimer();
	//  sendToDispatcher(msg); // 不转发，即使是180
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]   //如果收到的是3xx~6xx的错误响应，释放会话
	CLOSED
	{
		stopTimer();
		sendErrorToCall(MS_ERROR_REFUSED);
	}
	
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg)]    	//收到200 OK 携带SDP，会话建立成功
	BEAR_READY
	{
		stopTimer();
		sendSdpAnswerToCall(msg);	//返回SDP给CALL模块		
		sendAckToMS(msg);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg)] 
	CLOSED
	{//收到200 OK, 但不携带SDP，该情况基本不出现
		stopTimer();
		sendErrorToCall(MS_ERROR_OTHER);
		setTimer(BEAR_200OK_TIMEOUT);
		sendAckToMS(msg);
		sendByeToMS();
	}
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//Bye from MS
		stopTimer();
		sendCloseToCall();
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//Close from Call
		stopTimer();
		sendByeToMS();
	}

	onTimeOut(timerMark:TTimeMarkExt)  	//等待响应超时，会话释放
	CLOSED
	{	
		sendCloseToCall();
		sendByeToMS();
		stopTimer();
	}
	
}


CLOSED
Entry
{
	endTask();
}
{
}

Default
{
	onBye(msg:TUniNetMsg*)
	nil
	{
//		endTask();
	}
	
	onClose(msg:TUniNetMsg*)
	nil
	{
//		endTask();
	}
		
	onJoin(msg:TUniNetMsg*)
	nil
	{
//		endTask();
	}
	
	onSdpRequest(msg:TUniNetMsg*)
	nil
	{
//		endTask();
	}

	onResponse(msg:TUniNetMsg*)
	nil
	{
//		endTask();
	}
	
	onTimeOut(timerMark:TTimeMarkExt)
	nil
	{
	//	endTask();
	}
}

%%