#ifndef _H_CBEARMODULE_SM
#define _H_CBEARMODULE_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CBearModule_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class CBearState;
class CBearState_IDLE;
class CBearState_BEAR_INITIAL;
class CBearState_BEAR_READY;
class CBearState_BEAR_JOIN;
class CBearState_BEAR_MODIFYING;
class CBearState_CLOSED;
class CBearState_Default;
class CBearModuleState;
class CBearModuleContext;
class CBearModule;

class CBearModuleState :
    public statemap::State
{
public:

    CBearModuleState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CBearModuleContext&) {};
    virtual void Exit(CBearModuleContext&) {};

    virtual void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onJoin(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onResponse(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark);

protected:

    virtual void Default(CBearModuleContext& context);
};

class CBearState
{
public:

    static CBearState_IDLE IDLE;
    static CBearState_BEAR_INITIAL BEAR_INITIAL;
    static CBearState_BEAR_READY BEAR_READY;
    static CBearState_BEAR_JOIN BEAR_JOIN;
    static CBearState_BEAR_MODIFYING BEAR_MODIFYING;
    static CBearState_CLOSED CLOSED;
};

class CBearState_Default :
    public CBearModuleState
{
public:

    CBearState_Default(const char *name, int stateId)
    : CBearModuleState(name, stateId)
    {};

    virtual void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onJoin(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onResponse(CBearModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark);
};

class CBearState_IDLE :
    public CBearState_Default
{
public:
    CBearState_IDLE(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg);
};

class CBearState_BEAR_INITIAL :
    public CBearState_Default
{
public:
    CBearState_BEAR_INITIAL(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    void onResponse(CBearModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark);
};

class CBearState_BEAR_READY :
    public CBearState_Default
{
public:
    CBearState_BEAR_READY(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    void onJoin(CBearModuleContext& context, TUniNetMsg* msg);
    void onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg);
};

class CBearState_BEAR_JOIN :
    public CBearState_Default
{
public:
    CBearState_BEAR_JOIN(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    void onResponse(CBearModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark);
};

class CBearState_BEAR_MODIFYING :
    public CBearState_Default
{
public:
    CBearState_BEAR_MODIFYING(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void onBye(CBearModuleContext& context, TUniNetMsg* msg);
    void onClose(CBearModuleContext& context, TUniNetMsg* msg);
    void onResponse(CBearModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark);
};

class CBearState_CLOSED :
    public CBearState_Default
{
public:
    CBearState_CLOSED(const char *name, int stateId)
    : CBearState_Default(name, stateId)
    {};

    void Entry(CBearModuleContext&);
};

class CBearModuleContext :
    public statemap::FSMContext
{
public:

    CBearModuleContext(CBearModule& owner)
    : FSMContext(CBearState::IDLE),
      _owner(owner)
    {};

    CBearModuleContext(CBearModule& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    CBearModule& getOwner() const
    {
        return (_owner);
    };

    CBearModuleState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<CBearModuleState&>(*_state));
    };

    void onBye(TUniNetMsg* msg)
    {
        (getState()).onBye(*this, msg);
    };

    void onClose(TUniNetMsg* msg)
    {
        (getState()).onClose(*this, msg);
    };

    void onJoin(TUniNetMsg* msg)
    {
        (getState()).onJoin(*this, msg);
    };

    void onResponse(TUniNetMsg* msg)
    {
        (getState()).onResponse(*this, msg);
    };

    void onSdpRequest(TUniNetMsg* msg)
    {
        (getState()).onSdpRequest(*this, msg);
    };

    void onTimeOut(TTimeMarkExt timerMark)
    {
        (getState()).onTimeOut(*this, timerMark);
    };

private:

    CBearModule& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CBEARMODULE_SM
