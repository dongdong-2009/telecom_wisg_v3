/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CBearModule_sm.sm
 */


/*********************************************************************
 * Copyright (c)2010-2012, by BUPT
 * All rights reserved.

 * FileName:       MSControlModule.sm
 * System:         webrtc
 * SubSystem:      gateway
 * Author:         Yadong Zhang
 * Date:           2016-1-11
 * Version:        1.0
 * Description:
     Bear state machineã

*******************************************************************************/


#include "CBearModule.h"
#include "./CBearModule_sm.h"

using namespace statemap;

// Static class declarations.
CBearState_IDLE CBearState::IDLE("CBearState::IDLE", 0);
CBearState_BEAR_INITIAL CBearState::BEAR_INITIAL("CBearState::BEAR_INITIAL", 1);
CBearState_BEAR_READY CBearState::BEAR_READY("CBearState::BEAR_READY", 2);
CBearState_BEAR_JOIN CBearState::BEAR_JOIN("CBearState::BEAR_JOIN", 3);
CBearState_BEAR_MODIFYING CBearState::BEAR_MODIFYING("CBearState::BEAR_MODIFYING", 4);
CBearState_CLOSED CBearState::CLOSED("CBearState::CLOSED", 5);

void CBearModuleState::onBye(CBearModuleContext& context)
{
    Default(context);
    return;
}

void CBearModuleState::onBye(CBearModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CBearModuleState::onClose(CBearModuleContext& context)
{
    Default(context);
    return;
}

void CBearModuleState::onClose(CBearModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CBearModuleState::onJoin(CBearModuleContext& context)
{
    Default(context);
    return;
}

void CBearModuleState::onJoin(CBearModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CBearModuleState::onResponse(CBearModuleContext& context)
{
    Default(context);
    return;
}

void CBearModuleState::onResponse(CBearModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CBearModuleState::onSdpRequest(CBearModuleContext& context)
{
    Default(context);
    return;
}

void CBearModuleState::onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg)
{
    Default(context);
    return;
}

void CBearModuleState::onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark)
{
    Default(context);
    return;
}

void CBearModuleState::Default(CBearModuleContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void CBearState_Default::onBye(CBearModuleContext& context)
{


    return;
}

void CBearState_Default::onClose(CBearModuleContext& context)
{


    return;
}

void CBearState_Default::onJoin(CBearModuleContext& context)
{


    return;
}

void CBearState_Default::onSdpRequest(CBearModuleContext& context)
{


    return;
}

void CBearState_Default::onResponse(CBearModuleContext& context)
{


    return;
}

void CBearState_Default::onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark)
{
    CBearModule& ctxt(context.getOwner());

    CBearModuleState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.endTask();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

    return;
}

void CBearState_IDLE::onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.setTimer(BEAR_200OK_TIMEOUT);
        ctxt.sendInviteToMS(msg);
        context.setState(CBearState::BEAR_INITIAL);
    }
    catch (...)
    {
        context.setState(CBearState::BEAR_INITIAL);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_INITIAL::onBye(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendCloseToCall();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_INITIAL::onClose(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendCancelToMS();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_INITIAL::onResponse(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    if (true == ctxt.isResp1xx(msg))
    {
        // No actions.
    }
    else if (true == ctxt.isResp3xx_6xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendErrorToCall(MS_ERROR_REFUSED);
            context.setState(CBearState::CLOSED);
        }
        catch (...)
        {
            context.setState(CBearState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.setConnId(msg);
            ctxt.sendSdpAnswerToCall(msg);
            ctxt.sendAckToMS(msg);
            context.setState(CBearState::BEAR_READY);
        }
        catch (...)
        {
            context.setState(CBearState::BEAR_READY);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendErrorToCall(MS_ERROR_OTHER);
            ctxt.setTimer(BEAR_200OK_TIMEOUT);
            ctxt.sendAckToMS(msg);
            ctxt.sendByeToMS();
            context.setState(CBearState::CLOSED);
        }
        catch (...)
        {
            context.setState(CBearState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }    else
    {
         CBearState_Default::onResponse(context, msg);
    }

    return;
}

void CBearState_BEAR_INITIAL::onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendCloseToCall();
        ctxt.sendCancelToMS();
        ctxt.stopTimer();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_READY::onBye(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendCloseToCall();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_READY::onClose(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendByeToMS();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_READY::onJoin(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendJoinToMS(msg);
        ctxt.setTimer(BEAR_200OK_TIMEOUT);
        context.setState(CBearState::BEAR_JOIN);
    }
    catch (...)
    {
        context.setState(CBearState::BEAR_JOIN);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_READY::onSdpRequest(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.setTimer(BEAR_200OK_TIMEOUT);
        ctxt.sendInviteToMS(msg);
        context.setState(CBearState::BEAR_MODIFYING);
    }
    catch (...)
    {
        context.setState(CBearState::BEAR_MODIFYING);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_JOIN::onBye(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendCloseToCall();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_JOIN::onClose(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendByeToMS();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_JOIN::onResponse(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    if (true == ctxt.isResp1xx(msg))
    {
        // No actions.
    }
    else if (true == ctxt.isResp3xx_6xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendErrorToCall(MS_ERROR_REFUSED);
            context.setState(CBearState::CLOSED);
        }
        catch (...)
        {
            context.setState(CBearState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && "INFO" == ctxt.checkRespCSeqMethod(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            context.setState(CBearState::BEAR_READY);
        }
        catch (...)
        {
            context.setState(CBearState::BEAR_READY);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && "INFO" != ctxt.checkRespCSeqMethod(msg))

    {
        // No actions.
    }    else
    {
         CBearState_Default::onResponse(context, msg);
    }

    return;
}

void CBearState_BEAR_JOIN::onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendCloseToCall();
        ctxt.sendByeToMS();
        ctxt.stopTimer();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_MODIFYING::onBye(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendCloseToCall();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_MODIFYING::onClose(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.stopTimer();
        ctxt.sendByeToMS();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_BEAR_MODIFYING::onResponse(CBearModuleContext& context, TUniNetMsg* msg)
{
    CBearModule& ctxt(context.getOwner());

    if (true == ctxt.isResp1xx(msg))
    {
        // No actions.
    }
    else if (true == ctxt.isResp3xx_6xx(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendErrorToCall(MS_ERROR_REFUSED);
            context.setState(CBearState::CLOSED);
        }
        catch (...)
        {
            context.setState(CBearState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendSdpAnswerToCall(msg);
            ctxt.sendAckToMS(msg);
            context.setState(CBearState::BEAR_READY);
        }
        catch (...)
        {
            context.setState(CBearState::BEAR_READY);
            throw;
        }
        (context.getState()).Entry(context);
    }
    else if (true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg))

    {
        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.stopTimer();
            ctxt.sendErrorToCall(MS_ERROR_OTHER);
            ctxt.setTimer(BEAR_200OK_TIMEOUT);
            ctxt.sendAckToMS(msg);
            ctxt.sendByeToMS();
            context.setState(CBearState::CLOSED);
        }
        catch (...)
        {
            context.setState(CBearState::CLOSED);
            throw;
        }
        (context.getState()).Entry(context);
    }    else
    {
         CBearState_Default::onResponse(context, msg);
    }

    return;
}

void CBearState_BEAR_MODIFYING::onTimeOut(CBearModuleContext& context, TTimeMarkExt timerMark)
{
    CBearModule& ctxt(context.getOwner());

    (context.getState()).Exit(context);
    context.clearState();
    try
    {
        ctxt.sendCloseToCall();
        ctxt.sendByeToMS();
        ctxt.stopTimer();
        context.setState(CBearState::CLOSED);
    }
    catch (...)
    {
        context.setState(CBearState::CLOSED);
        throw;
    }
    (context.getState()).Entry(context);

    return;
}

void CBearState_CLOSED::Entry(CBearModuleContext& context)

{
    CBearModule& ctxt(context.getOwner());

    ctxt.endTask();
    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
