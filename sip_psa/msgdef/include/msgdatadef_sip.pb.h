// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgdatadef_sip.proto

#ifndef PROTOBUF_msgdatadef_5fsip_2eproto__INCLUDED
#define PROTOBUF_msgdatadef_5fsip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace DICE {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgdatadef_5fsip_2eproto();
void protobuf_AssignDesc_msgdatadef_5fsip_2eproto();
void protobuf_ShutdownFile_msgdatadef_5fsip_2eproto();

class TSipVia;
class TSipUri;
class TSipVias;

// ===================================================================

class TSipVia : public ::google::protobuf::Message {
 public:
  TSipVia();
  virtual ~TSipVia();
  
  TSipVia(const TSipVia& from);
  
  inline TSipVia& operator=(const TSipVia& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TSipVia& default_instance();
  
  void Swap(TSipVia* other);
  
  // implements Message ----------------------------------------------
  
  TSipVia* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSipVia& from);
  void MergeFrom(const TSipVia& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DICE.TSipUri uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::DICE::TSipUri& uri() const;
  inline ::DICE::TSipUri* mutable_uri();
  inline ::DICE::TSipUri* release_uri();
  
  // required string branch = 2;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 2;
  inline const ::std::string& branch() const;
  inline void set_branch(const ::std::string& value);
  inline void set_branch(const char* value);
  inline void set_branch(const char* value, size_t size);
  inline ::std::string* mutable_branch();
  inline ::std::string* release_branch();
  
  // optional string rport = 3;
  inline bool has_rport() const;
  inline void clear_rport();
  static const int kRportFieldNumber = 3;
  inline const ::std::string& rport() const;
  inline void set_rport(const ::std::string& value);
  inline void set_rport(const char* value);
  inline void set_rport(const char* value, size_t size);
  inline ::std::string* mutable_rport();
  inline ::std::string* release_rport();
  
  // optional string received = 4;
  inline bool has_received() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 4;
  inline const ::std::string& received() const;
  inline void set_received(const ::std::string& value);
  inline void set_received(const char* value);
  inline void set_received(const char* value, size_t size);
  inline ::std::string* mutable_received();
  inline ::std::string* release_received();
  
  // @@protoc_insertion_point(class_scope:DICE.TSipVia)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_rport();
  inline void clear_has_rport();
  inline void set_has_received();
  inline void clear_has_received();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DICE::TSipUri* uri_;
  ::std::string* branch_;
  ::std::string* rport_;
  ::std::string* received_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_AssignDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_ShutdownFile_msgdatadef_5fsip_2eproto();
  
  void InitAsDefaultInstance();
  static TSipVia* default_instance_;
};
// -------------------------------------------------------------------

class TSipUri : public ::google::protobuf::Message {
 public:
  TSipUri();
  virtual ~TSipUri();
  
  TSipUri(const TSipUri& from);
  
  inline TSipUri& operator=(const TSipUri& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TSipUri& default_instance();
  
  void Swap(TSipUri* other);
  
  // implements Message ----------------------------------------------
  
  TSipUri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSipUri& from);
  void MergeFrom(const TSipUri& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // optional string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  
  // @@protoc_insertion_point(class_scope:DICE.TSipUri)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::std::string* port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_AssignDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_ShutdownFile_msgdatadef_5fsip_2eproto();
  
  void InitAsDefaultInstance();
  static TSipUri* default_instance_;
};
// -------------------------------------------------------------------

class TSipVias : public ::google::protobuf::Message {
 public:
  TSipVias();
  virtual ~TSipVias();
  
  TSipVias(const TSipVias& from);
  
  inline TSipVias& operator=(const TSipVias& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TSipVias& default_instance();
  
  void Swap(TSipVias* other);
  
  // implements Message ----------------------------------------------
  
  TSipVias* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSipVias& from);
  void MergeFrom(const TSipVias& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DICE.TSipVia vias = 1;
  inline int vias_size() const;
  inline void clear_vias();
  static const int kViasFieldNumber = 1;
  inline const ::DICE::TSipVia& vias(int index) const;
  inline ::DICE::TSipVia* mutable_vias(int index);
  inline ::DICE::TSipVia* add_vias();
  inline const ::google::protobuf::RepeatedPtrField< ::DICE::TSipVia >&
      vias() const;
  inline ::google::protobuf::RepeatedPtrField< ::DICE::TSipVia >*
      mutable_vias();
  
  // @@protoc_insertion_point(class_scope:DICE.TSipVias)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DICE::TSipVia > vias_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_AssignDesc_msgdatadef_5fsip_2eproto();
  friend void protobuf_ShutdownFile_msgdatadef_5fsip_2eproto();
  
  void InitAsDefaultInstance();
  static TSipVias* default_instance_;
};
// ===================================================================


// ===================================================================

// TSipVia

// required .DICE.TSipUri uri = 1;
inline bool TSipVia::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSipVia::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSipVia::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSipVia::clear_uri() {
  if (uri_ != NULL) uri_->::DICE::TSipUri::Clear();
  clear_has_uri();
}
inline const ::DICE::TSipUri& TSipVia::uri() const {
  return uri_ != NULL ? *uri_ : *default_instance_->uri_;
}
inline ::DICE::TSipUri* TSipVia::mutable_uri() {
  set_has_uri();
  if (uri_ == NULL) uri_ = new ::DICE::TSipUri;
  return uri_;
}
inline ::DICE::TSipUri* TSipVia::release_uri() {
  clear_has_uri();
  ::DICE::TSipUri* temp = uri_;
  uri_ = NULL;
  return temp;
}

// required string branch = 2;
inline bool TSipVia::has_branch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSipVia::set_has_branch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSipVia::clear_has_branch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSipVia::clear_branch() {
  if (branch_ != &::google::protobuf::internal::kEmptyString) {
    branch_->clear();
  }
  clear_has_branch();
}
inline const ::std::string& TSipVia::branch() const {
  return *branch_;
}
inline void TSipVia::set_branch(const ::std::string& value) {
  set_has_branch();
  if (branch_ == &::google::protobuf::internal::kEmptyString) {
    branch_ = new ::std::string;
  }
  branch_->assign(value);
}
inline void TSipVia::set_branch(const char* value) {
  set_has_branch();
  if (branch_ == &::google::protobuf::internal::kEmptyString) {
    branch_ = new ::std::string;
  }
  branch_->assign(value);
}
inline void TSipVia::set_branch(const char* value, size_t size) {
  set_has_branch();
  if (branch_ == &::google::protobuf::internal::kEmptyString) {
    branch_ = new ::std::string;
  }
  branch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TSipVia::mutable_branch() {
  set_has_branch();
  if (branch_ == &::google::protobuf::internal::kEmptyString) {
    branch_ = new ::std::string;
  }
  return branch_;
}
inline ::std::string* TSipVia::release_branch() {
  clear_has_branch();
  if (branch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branch_;
    branch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rport = 3;
inline bool TSipVia::has_rport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSipVia::set_has_rport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSipVia::clear_has_rport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSipVia::clear_rport() {
  if (rport_ != &::google::protobuf::internal::kEmptyString) {
    rport_->clear();
  }
  clear_has_rport();
}
inline const ::std::string& TSipVia::rport() const {
  return *rport_;
}
inline void TSipVia::set_rport(const ::std::string& value) {
  set_has_rport();
  if (rport_ == &::google::protobuf::internal::kEmptyString) {
    rport_ = new ::std::string;
  }
  rport_->assign(value);
}
inline void TSipVia::set_rport(const char* value) {
  set_has_rport();
  if (rport_ == &::google::protobuf::internal::kEmptyString) {
    rport_ = new ::std::string;
  }
  rport_->assign(value);
}
inline void TSipVia::set_rport(const char* value, size_t size) {
  set_has_rport();
  if (rport_ == &::google::protobuf::internal::kEmptyString) {
    rport_ = new ::std::string;
  }
  rport_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TSipVia::mutable_rport() {
  set_has_rport();
  if (rport_ == &::google::protobuf::internal::kEmptyString) {
    rport_ = new ::std::string;
  }
  return rport_;
}
inline ::std::string* TSipVia::release_rport() {
  clear_has_rport();
  if (rport_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rport_;
    rport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string received = 4;
inline bool TSipVia::has_received() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSipVia::set_has_received() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSipVia::clear_has_received() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSipVia::clear_received() {
  if (received_ != &::google::protobuf::internal::kEmptyString) {
    received_->clear();
  }
  clear_has_received();
}
inline const ::std::string& TSipVia::received() const {
  return *received_;
}
inline void TSipVia::set_received(const ::std::string& value) {
  set_has_received();
  if (received_ == &::google::protobuf::internal::kEmptyString) {
    received_ = new ::std::string;
  }
  received_->assign(value);
}
inline void TSipVia::set_received(const char* value) {
  set_has_received();
  if (received_ == &::google::protobuf::internal::kEmptyString) {
    received_ = new ::std::string;
  }
  received_->assign(value);
}
inline void TSipVia::set_received(const char* value, size_t size) {
  set_has_received();
  if (received_ == &::google::protobuf::internal::kEmptyString) {
    received_ = new ::std::string;
  }
  received_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TSipVia::mutable_received() {
  set_has_received();
  if (received_ == &::google::protobuf::internal::kEmptyString) {
    received_ = new ::std::string;
  }
  return received_;
}
inline ::std::string* TSipVia::release_received() {
  clear_has_received();
  if (received_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = received_;
    received_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TSipUri

// required string host = 1;
inline bool TSipUri::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSipUri::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSipUri::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSipUri::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& TSipUri::host() const {
  return *host_;
}
inline void TSipUri::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void TSipUri::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void TSipUri::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TSipUri::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* TSipUri::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string port = 2;
inline bool TSipUri::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSipUri::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSipUri::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSipUri::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& TSipUri::port() const {
  return *port_;
}
inline void TSipUri::set_port(const ::std::string& value) {
  if(value.empty())
	  return;

  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void TSipUri::set_port(const char* value) {
  if(value == NULL){
	  return;
  }
  set_has_port();

  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void TSipUri::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TSipUri::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* TSipUri::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TSipVias

// repeated .DICE.TSipVia vias = 1;
inline int TSipVias::vias_size() const {
  return vias_.size();
}
inline void TSipVias::clear_vias() {
  vias_.Clear();
}
inline const ::DICE::TSipVia& TSipVias::vias(int index) const {
  return vias_.Get(index);
}
inline ::DICE::TSipVia* TSipVias::mutable_vias(int index) {
  return vias_.Mutable(index);
}
inline ::DICE::TSipVia* TSipVias::add_vias() {
  return vias_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DICE::TSipVia >&
TSipVias::vias() const {
  return vias_;
}
inline ::google::protobuf::RepeatedPtrField< ::DICE::TSipVia >*
TSipVias::mutable_vias() {
  return &vias_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DICE

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgdatadef_5fsip_2eproto__INCLUDED
