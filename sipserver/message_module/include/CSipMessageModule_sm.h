#ifndef _H_CSIPMESSAGEMODULE_SM
#define _H_CSIPMESSAGEMODULE_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CSipMessageModule_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class CSipMessageModState;
class CSipMessageModState_IDLE;
class CSipMessageModState_FORWARD;
class CSipMessageModState_RELEASE;
class CSipMessageModState_Default;
class CSipMessageModuleState;
class CSipMessageModuleContext;
class CSipMessageModule;

class CSipMessageModuleState :
    public statemap::State
{
public:

    CSipMessageModuleState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CSipMessageModuleContext&) {};
    virtual void Exit(CSipMessageModuleContext&) {};

    virtual void onMessage(CSipMessageModuleContext& context, TUniNetMsg* msg);
    virtual void onTimeOut(CSipMessageModuleContext& context, TTimeMarkExt timerMark);

protected:

    virtual void Default(CSipMessageModuleContext& context);
};

class CSipMessageModState
{
public:

    static CSipMessageModState_IDLE IDLE;
    static CSipMessageModState_FORWARD FORWARD;
    static CSipMessageModState_RELEASE RELEASE;
};

class CSipMessageModState_Default :
    public CSipMessageModuleState
{
public:

    CSipMessageModState_Default(const char *name, int stateId)
    : CSipMessageModuleState(name, stateId)
    {};

};

class CSipMessageModState_IDLE :
    public CSipMessageModState_Default
{
public:
    CSipMessageModState_IDLE(const char *name, int stateId)
    : CSipMessageModState_Default(name, stateId)
    {};

    void onMessage(CSipMessageModuleContext& context, TUniNetMsg* msg);
};

class CSipMessageModState_FORWARD :
    public CSipMessageModState_Default
{
public:
    CSipMessageModState_FORWARD(const char *name, int stateId)
    : CSipMessageModState_Default(name, stateId)
    {};

    void onMessage(CSipMessageModuleContext& context, TUniNetMsg* msg);
    void onTimeOut(CSipMessageModuleContext& context, TTimeMarkExt timerMark);
};

class CSipMessageModState_RELEASE :
    public CSipMessageModState_Default
{
public:
    CSipMessageModState_RELEASE(const char *name, int stateId)
    : CSipMessageModState_Default(name, stateId)
    {};

    void Entry(CSipMessageModuleContext&);
};

class CSipMessageModuleContext :
    public statemap::FSMContext
{
public:

    CSipMessageModuleContext(CSipMessageModule& owner)
    : FSMContext(CSipMessageModState::IDLE),
      _owner(owner)
    {};

    CSipMessageModuleContext(CSipMessageModule& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    CSipMessageModule& getOwner() const
    {
        return (_owner);
    };

    CSipMessageModuleState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<CSipMessageModuleState&>(*_state));
    };

    void onMessage(TUniNetMsg* msg)
    {
        (getState()).onMessage(*this, msg);
    };

    void onTimeOut(TTimeMarkExt timerMark)
    {
        (getState()).onTimeOut(*this, timerMark);
    };

private:

    CSipMessageModule& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CSIPMESSAGEMODULE_SM
