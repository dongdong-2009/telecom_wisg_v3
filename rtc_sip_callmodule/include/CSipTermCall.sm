%{
/*********************************************************************
 * Copyright (c)2010-2012, by BUPT
 * All rights reserved.

 * FileName:       CSipTermCall.sm
 * System:         webrtc
 * SubSystem:      gateway
 * Author:         Yadong Zhang
 * Date:           2016-1-16
 * Version:        1.0
 * Description:
     Sip_terminal_call module, WebRTC主叫模块

*******************************************************************************/
%}
/* all possible sate
 * IDLE			initial.
 * CALLPROC						收到RTC call的请求，向IMS发送带空Sdp的invite，等到IMS响应
 * BEAR_GATEWAY_READY			收到IMS的彩铃SDP，检查SDP，向BEAR发送sdp请求
 * BEAR_CONFIRMING				收到BEAR的SDP answer，向IMS返回PRACK，等待IMS返回PRACK的的200 OK
 * BEAR_CONFIRMED				收到对PRACK的200 OK，等到update或对invite的200 OK
 * BEAR_CLIENT_READY			收到对INVITE的200 OK，且携带SDP
 * BEAR_MODYFYING				收到UPDATE，向BEAR发送新的Sdp请求。等待bear响应
 * ACTIVE						信令通道建立
 * ACTIVE_WAIT_BEAR_MODIFYING	收到来自IMS的媒体修改请求，向ims发送notify，webrtc发送新的offer，携带新的sdp			
 * ACTIVE_WAIT_ACK				收到bear模块的sdp answer，向IMS发送200 OK, 等到ACK
 * CLOSED						结束模块
*/


//指明.sm服务的实际Task类
%class	CR2SCallModule
//指明需要SMC生成的代码包含哪个文件。只能一个。如多于一个将被忽略。
%header CR2SCallModule.h
//初始状态
%start CSipTermCallState::IDLE
//生成的状态集合名称
%map CSipTermCallState


%%

IDLE
{
	onNotify(msg: TUniNetMsg*)
	CALLPROC
	{
		setTimer(SIP_200OK_TIMEOUT);
		sendNoSdpInviteToIMS();
	}
	
}

CALLPROC
{
	//收到响应 1XX
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp1xx(msg) && false == ctxt.isWithSDP(msg)]   	
	nil 
	{	
		
		stopTimer();
		
		setTimer(SIP_CONNECTING_TIMEOUT);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]   //如果收到的是3xx~6xx的错误响应，释放会话
	CLOSED
	{
		stopTimer();
		notifyRtcOrigCallError(msg);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp1xx(msg) && true == ctxt.isWithSDP(msg) && true == ctxt.compAndModifySdpWithRtc(msg)]
	BEAR_GATEWAY_READY
	{//compAndModifySdpWithRtc：如果rtc 音视频，sip音频，会修改rtc端sdp，去掉视频，如果rtc音频，sip音视频，去掉sip端sdp视频
		stopTimer();
		setUACTag(msg);
		notifyRtcOrigCallSdp();
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp1xx(msg) && true == ctxt.isWithSDP(msg) && false == ctxt.compAndModifySdpWithRtc(msg)]
	CLOSED
	{
		stopTimer();
		setUACTag(msg);
		notifyRtcOrigCallClose();
	}
	
	
	onResponse(msg:TUniNetMsg*) 
	[true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg)]    	//收到200 OK 携带SDP，会话建立成功
	BEAR_CLIENT_READY
	{
		stopTimer();
		setUACTag(msg);
		sendReqToBear_Sip();	//返回SDP给CALL模块
		setTimer(SIP_WAITBEAR_TIMEOUT);		
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg)] 
	CLOSED
	{//收到200 OK, 但不携带SDP，该情况基本不出现
		stopTimer();
				
		setUACTag(msg);

		notifyRtcOrigCallClose();
		sendCancelToIMS();
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//RTC_CALL端挂断
		stopTimer();
		sendCancelToIMS();
	}
	

	onTimeOut(timerMark:TTimeMarkExt)  
	CLOSED
	{	//IMS响应超时
		stopTimer();
		notifyRtcOrigCallClose();
		sendCancelToIMS();
	}
	
}

BEAR_GATEWAY_READY
{
	onSdpAnswer(msg:TUniNetMsg*)   	
	BEAR_CONFIRMED
	{//收到来自bear的SDP
		stopTimer();
		sendPrackToIMS(msg);
		setTimer(SIP_200OK_TIMEOUT);
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//RTC挂断电话
		stopTimer();
		sendCloseToBear_Sip();
		sendCancelToIMS();
	}
	
	
	onError(msg:TUniNetMsg*)
	CLOSED
	{//MS错误
		stopTimer();
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	
	onTimeOut(msg:TUniNetMsg*)
	CLOSED
	{//等待XMS超时
		stopTimer();
		sendCancelToIMS();
		notifyRtcOrigCallError(ERROR_TIMEOUT);
		notifyRtcOrigCallClose();
	}
	
}

BEAR_CONFIRMING
{
	onResponse(msg:TUniNetMsg*)
	["PRACK" != ctxt.checkRespCseqMothod(msg)]
	CLOSED
	{
		
		sendCancelToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}

	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg)]
	BEAR_CONFIRMED
	{ //doNothing，listening color ring
		stopTimer();
		setTimer(SIP_RING_TIMEOUT);
	}
	
	onResponse(msg:TUniNetMsg*)
	[false == ctxt.isResp2xx(msg)]
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	onClose(msg:TUniNetMsg*)
	[true == ctxt.isFromRtc(msg)]//msg == NULL
	CLOSED
	{//RTC_CALL端挂断
		stopTimer();
		sendCloseToBear_Sip();
		sendCancelToIMS();
	}
	
	onClose(msg:TUniNetMsg*)
	[false == ctxt.isFromRtc(msg)]
	CLOSED
	{//MS挂断
		stopTimer();
		notifyRtcOrigCallClose();
		sendCancelToIMS();
	}
	
		
	onTimeOut(timerMark:TTimeMarkExt)  	//等待IMS的PRACK响应超时，会话释放
	CLOSED
	{	
		stopTimer();
		sendCancelToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
}

BEAR_CONFIRMED
{
	onResponse(msg:TUniNetMsg*)
	["INVITE" != ctxt.checkRespCseqMothod(msg)]
	CLOSED
	{
		stopTimer();
		
		sendCancelToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg) && true == ctxt.compAndModifySdpWithRtc(msg)]
	BEAR_CLIENT_READY
	{
		stopTimer();
		
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && true == ctxt.isWithSDP(msg) && false == ctxt.compAndModifySdpWithRtc(msg)]
	CLOSED
	{
		stopTimer();
		
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
		sendCancelToIMS();
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp2xx(msg) && false == ctxt.isWithSDP(msg)]
	ACTIVE
	{
		stopTimer();
		
		//ToDO setTimer Session-Expires
		sendAckToIMS(NULL);
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}

	onUpdate(msg:TUniNetMsg*)
	[false == ctxt.isWithSDP(msg)]
	nil
	{	
		stopTimer();
		send200OKForUpdateToIMS(NULL); //no sdp
	}

	onUpdate(msg:TUniNetMsg*)
	[true == ctxt.compAndModifySdpWithRtc(msg)]
	BEAR_MODYFYING
	{
		stopTimer();
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	onUpdate(msg:TUniNetMsg*)
	[false == ctxt.compAndModifySdpWithRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
		sendCancelToIMS();
	}
	
	onClose(msg:TUniNetMsg*)
	[true == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendCancelToIMS();
		sendCloseToBear_Sip();
	}
	
	onClose(msg:TUniNetMsg*)
	[false == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	
	onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{
		stopTimer();
		sendCancelToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
	
}


BEAR_CLIENT_READY
{
	onSdpAnswer(msg:TUniNetMsg*)
	ACTIVE
	{
		stopTimer();
		sendAckToIMS(msg);
		
		//ToDo setTimer Session-Expires
	}
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//RTC挂断电话
		stopTimer();
		sendCloseToBear_Sip();
		sendCancelToIMS();
	}
	
	
	onError(msg:TUniNetMsg*)
	CLOSED
	{//MS错误
		stopTimer();
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	
	onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{//等待XMS超时
		stopTimer();
		notifyRtcOrigCallError(ERROR_TIMEOUT);
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	

}


BEAR_MODYFYING
{
	onSdpAnswer(msg:TUniNetMsg*)
	BEAR_CONFIRMED
	{
		stopTimer();
		send200OKForUpdateToIMS(msg);
	}
	
	onResponse(msg:TUniNetMsg*)
	["INVITE" != ctxt.checkRespCseqMothod(msg) || false != ctxt.isResp3xx_6xx(msg)]
	CLOSED
	{
		stopTimer();
		
		sendCancelToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
	
	onResponse(msg:TUniNetMsg*)
	[true == ctxt.isResp3xx_6xx(msg)]
	CLOSED
	{//IMS端挂断
		stopTimer();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
	
	
	onClose(msg:TUniNetMsg*)
	CLOSED
	{//RTC挂断电话
		stopTimer();
		sendCloseToBear_Sip();
		sendCancelToIMS();
	}
	
	
	onError(msg:TUniNetMsg*)
	CLOSED
	{//MS错误
		stopTimer();
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
	
	onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{//等待XMS超时
		stopTimer();
		notifyRtcOrigCallError(ERROR_TIMEOUT);
		sendCancelToIMS();
		notifyRtcOrigCallClose();
	}
	
}


ACTIVE
{
	onUpdate(msg:TUniNetMsg*)
	[false == ctxt.isWithSDP(msg)]
	ACTIVE
	{
		
		send200OKForUpdateToIMS(NULL);//会话刷新，更新定时器
		//ToDo setTimer Session-Expires
		
	}
	
	
	onUpdate(msg:TUniNetMsg*)
	[true == ctxt.compSdpWithOld(msg)] 
	ACTIVE_WAIT_BEAR_MODIFYING
	{//存在音视频切换
		notifyRtcOrigCallSdp();
		setUpdateFlag(); 	//标志是Update的
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	
	onUpdate(msg:TUniNetMsg*)
	[false == ctxt.compSdpWithOld(msg)]
	ACTIVE_WAIT_BEAR_MODIFYING
	{//不存在音视频切换
		setUpdateFlag();
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	onInvite(msg:TUniNetMsg*)
	[false == ctxt.isWithSDP(msg)]
	ACTIVE_WAIT_ACK
	{
		send200OKForInviteToIMS(NULL); //会话刷新，将更新定时器
		setTimer(SIP_ACK_TIMEOUT);
	}
	
	
	onInvite(msg:TUniNetMsg*)
	[true == ctxt.compSdpWithOld(msg)] 
	ACTIVE_WAIT_BEAR_MODIFYING
	{//存在音视频切换
		notifyRtcOrigCallSdp();
		setInviteFlag(); 	//标志是Update的
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	
	onInvite(msg:TUniNetMsg*)
	[false == ctxt.compSdpWithOld(msg)]
	ACTIVE_WAIT_BEAR_MODIFYING
	{//不存在音视频切换
		setInviteFlag();
		sendReqToBear_Sip();
		setTimer(SIP_WAITBEAR_TIMEOUT);
	}
	
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//IMS挂断电话
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
		
	onClose(msg:TUniNetMsg*)
	[true == ctxt.isFromRtc(msg)]
	CLOSED
	{
		sendCloseToBear_Sip();
		sendByeToIMS();
	}
	
	
	onClose(msg:TUniNetMsg*)
	[false == ctxt.isFromRtc(msg)]
	CLOSED
	{
		sendByeToIMS();
		notifyRtcOrigCallClose();
	}
	
	/* onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{//添加
		sendByeToIMS();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
		
	} */
	

}


ACTIVE_WAIT_BEAR_MODIFYING
{
	onSdpAnswer(msg:TUniNetMsg*)
	[true == ctxt.isUpdateFlag()]
	ACTIVE
	{
		resetFlag();
		stopTimer();
		send200OKForUpdateToIMS(msg);
	}
	
	onSdpAnswer(msg:TUniNetMsg*)
	[true == ctxt.isInviteFlag()]
	ACTIVE_WAIT_ACK
	{
		resetFlag();
		stopTimer();
		send200OKForInviteToIMS(msg);
		setTimer(SIP_ACK_TIMEOUT);
	}
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//IMS挂断电话
		stopTimer();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
		
	onClose(msg:TUniNetMsg*)
	[true == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		sendByeToIMS();
	}
	
	
	onClose(msg:TUniNetMsg*)
	[false == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendByeToIMS();
		notifyRtcOrigCallClose();
	}
	
	onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		sendByeToIMS();
		notifyRtcOrigCallClose();
	}
	
}


ACTIVE_WAIT_ACK
{
	onAck(msg:TUniNetMsg*)
	ACTIVE
	{
		//ToDo setTimer Session-Expires
		
	}
	
	onBye(msg:TUniNetMsg*)
	CLOSED
	{//IMS挂断电话
		stopTimer();
		sendCloseToBear_Sip();
		notifyRtcOrigCallClose();
	}
		
	onClose(msg:TUniNetMsg*)
	[true == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		sendByeToIMS();
	}
	
	
	onClose(msg:TUniNetMsg*)
	[false == ctxt.isFromRtc(msg)]
	CLOSED
	{
		stopTimer();
		sendByeToIMS();
		notifyRtcOrigCallClose();
	}
	
	onTimeOut(timerMark:TTimeMarkExt)
	CLOSED
	{
		stopTimer();
		sendCloseToBear_Sip();
		sendByeToIMS();
		notifyRtcOrigCallClose();
	}
	
	
	
}

CLOSED
Entry
{
	endTask_Sip();
}
{
}


Default
{
	onSdpAnswer(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}

	onNotify(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onResponse(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onClose(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	onError(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onAck(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onUpdate(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onInvite(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onBye(msg:TUniNetMsg*)
	nil
	{
		handleUnexpectedMsg(msg);
	}
	
	onTimeOut(timerMark:TTimeMarkExt)
	nil
	{
		
	}
}

%%